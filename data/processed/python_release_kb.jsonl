{"id": "py313_overview", "title": "What's Actually New in Python 3.13", "kind": "whatsnew", "version": "3.13", "released": "2024-10-07", "urls": ["https://docs.python.org/3/whatsnew/3.13.html", "https://www.python.org/downloads/release/python-3130/", "https://peps.python.org/pep-0703/", "https://peps.python.org/pep-0744/"], "content": "Python 3.13 introduces a revamped interactive interpreter with colorized tracebacks, experimental free-threaded mode per PEP 703 (GIL disabled build), and a basic JIT compiler per PEP 744 (off by default initially). It also defines semantics for mutating locals(), adds default values for type parameters, and removes several long-deprecated stdlib modules following PEP 594. The release notes emphasize user-facing improvements and deprecations, and provide porting guidance.", "answer_card": {"question_pattern": "What's actually new in Python 3.13?", "one_sentence": "Released on Oct 7, 2024, Python 3.13 ships a new interactive interpreter, experimental free‑threaded mode (PEP 703), and a basic JIT compiler (PEP 744), plus many stdlib cleanups and deprecations.", "example": "Enable colors via default settings in tracebacks; free‑threaded CPython can be built and run experimentally.", "why_it_matters": "Interactivity, performance groundwork (JIT), and concurrency experiments set direction for future releases.", "sources": [{"title": "What's New In Python 3.13", "url": "https://docs.python.org/3/whatsnew/3.13.html"}, {"title": "Python 3.13.0 Release", "url": "https://www.python.org/downloads/release/python-3130/"}, {"title": "PEP 703", "url": "https://peps.python.org/pep-0703/"}, {"title": "PEP 744", "url": "https://peps.python.org/pep-0744/"}]}, "timestamp": "2025-08-17T16:03:48.837617Z"}
{"id": "venv_gitignore_313", "title": "venv default .gitignore and new flag in 3.13", "kind": "library", "module": "venv", "version": "3.13", "urls": ["https://docs.python.org/3/library/venv.html"], "content": "In Python 3.13, venv creates a .gitignore file by default to prevent committing the environment. A new CLI option --without-scm-ignore-files disables adding SCM ignore files. The EnvBuilder API also gains an scm_ignore_files parameter and create_git_ignore_file().", "answer_card": {"question_pattern": "What is the new flag in Python 3.13 venv and what does it do?", "one_sentence": "Python 3.13's venv now writes a .gitignore by default; use --without-scm-ignore-files to opt out.", "example": "python -m venv --without-scm-ignore-files .venv  # do not create .gitignore in the venv dir", "why_it_matters": "Prevents accidental commits of virtual environments while allowing projects to opt out.", "sources": [{"title": "venv — Creation of virtual environments", "url": "https://docs.python.org/3/library/venv.html"}]}, "timestamp": "2025-08-17T16:03:48.837627Z"}
{"id": "pep701_fstrings_312", "title": "PEP 701: f-strings formalized (Python 3.12)", "kind": "pep+whatsnew", "pep": "701", "version": "3.12", "urls": ["https://docs.python.org/3/whatsnew/3.12.html", "https://peps.python.org/pep-0701/"], "content": "Python 3.12 integrates f-strings into the grammar (PEP 701), lifting many previous restrictions: arbitrary expressions, reuse of the same quotes as the outer f-string, multi-line expressions, comments, backslashes, and Unicode escapes inside expressions. Tokenization also changes (FSTRING_* tokens), speeding tokenize() by up to ~64% in benchmarks.", "answer_card": {"question_pattern": "What changes did PEP 701 bring to f-strings in Python 3.12?", "one_sentence": "PEP 701 (3.12) lifts prior f-string limits—allowing arbitrary, multi-line expressions with quote reuse, comments, and backslashes—and updates tokenization.", "example": "f\"This is the playlist: {', '.join([\n  'Take me back to Eden',  # comment\n  'Alkaline',\n])}\"", "why_it_matters": "Makes f-strings more expressive and fixes long‑standing parsing quirks; tools get clearer tokens.", "sources": [{"title": "What's New In Python 3.12 (PEP 701 section)", "url": "https://docs.python.org/3/whatsnew/3.12.html"}, {"title": "PEP 701", "url": "https://peps.python.org/pep-0701/"}]}, "timestamp": "2025-08-17T16:03:48.837629Z"}
{"id": "pep722_status", "title": "PEP 722: single-file script dependencies (status)", "kind": "pep", "pep": "722", "version": "N/A", "urls": ["https://peps.python.org/pep-0722/", "https://peps.python.org/pep-0723/"], "content": "PEP 722 proposed a comment-based dependency block for single-file scripts. Status: Rejected and superseded by PEP 723 ('Inline script metadata'). Therefore, no Python version 'added' PEP 722.", "answer_card": {"question_pattern": "What is PEP 722 and in which Python version was it added?", "one_sentence": "PEP 722 defined a script dependency block format but was rejected; no Python release added it (superseded by PEP 723).", "example": "# Script Dependencies:\\n#   requests\\n#   rich  # example  (format proposed, not accepted)", "why_it_matters": "Avoids misinformation when comparing 722 vs. the accepted 723 approach to inline script metadata.", "sources": [{"title": "PEP 722 (Status: Rejected)", "url": "https://peps.python.org/pep-0722/"}, {"title": "PEP 723 (Inline script metadata)", "url": "https://peps.python.org/pep-0723/"}]}, "timestamp": "2025-08-17T16:03:48.837631Z"}
{"id": "pep688_buffer_protocol_312", "title": "PEP 688: Python-level buffer protocol (3.12)", "kind": "pep", "pep": "688", "version": "3.12", "urls": ["https://peps.python.org/pep-0688/", "https://docs.python.org/3/whatsnew/3.12.html"], "content": "PEP 688 adds Python-level access to the buffer protocol, introducing __buffer__/__release_buffer__ hooks and typing support via collections.abc.Buffer, enabling type checkers and Python code to reason about buffer-capable objects.", "answer_card": {"question_pattern": "What does PEP 688 add to the Python standard library?", "one_sentence": "PEP 688 (3.12) exposes the buffer protocol to Python with __buffer__/__release_buffer__ and a Buffer ABC for typing.", "example": "class MyBuffer:  # sketch\\n    def __buffer__(self, flags: int, /) -> memoryview: ...", "why_it_matters": "Lets pure‑Python code and type checkers interoperate with buffer‑providing objects more consistently.", "sources": [{"title": "PEP 688 (Python-Version: 3.12)", "url": "https://peps.python.org/pep-0688/"}, {"title": "What's New In Python 3.12", "url": "https://docs.python.org/3/whatsnew/3.12.html"}]}, "timestamp": "2025-08-17T16:03:48.837634Z"}
{"id": "tomllib_added_in_311", "title": "TOML parsing module added in 3.11 (tomllib)", "kind": "library", "module": "tomllib", "version": "3.11", "urls": ["https://docs.python.org/3/library/tomllib.html", "https://docs.python.org/3/whatsnew/3.11.html"], "content": "The read-only TOML parser 'tomllib' was added to the standard library in Python 3.11. It supports TOML 1.0 and provides load()/loads() for reading TOML; it does not support writing.", "answer_card": {"question_pattern": "Which new module for TOML parsing was added in Python 3.13?", "one_sentence": "None—TOML parsing arrived earlier: the stdlib module tomllib was added in Python 3.11 (not 3.13).", "example": "import tomllib; data = tomllib.loads('x = 1')", "why_it_matters": "Prevents version confusion when building features that depend on TOML parsing.", "sources": [{"title": "tomllib — Parse TOML files (Added in 3.11)", "url": "https://docs.python.org/3/library/tomllib.html"}, {"title": "What's New In Python 3.11", "url": "https://docs.python.org/3/whatsnew/3.11.html"}]}, "timestamp": "2025-08-17T16:03:48.837636Z"}
{"id": "asyncio_taskgroup_312", "title": "Asyncio TaskGroup notes for Python 3.12", "kind": "library", "module": "asyncio", "version": "3.12", "urls": ["https://docs.python.org/3/whatsnew/3.12.html", "https://docs.python.org/3/library/asyncio-task.html", "https://docs.python.org/3/whatsnew/3.11.html", "https://docs.python.org/3/whatsnew/changelog.html"], "content": "TaskGroup was introduced in 3.11. In 3.12, asyncio saw substantial performance work and new eager task support (e.g., eager_start parameter on create_task and create_eager_task_factory()). There is no specific TaskGroup API change called out for 3.12 in the docs; later in 3.13, TaskGroup.create_task() was clarified to close the coroutine if the group is inactive, and changelog entries reference fixes around eager tasks and cancellation semantics.", "answer_card": {"question_pattern": "What changes were made to asyncio TaskGroups in Python 3.12?", "one_sentence": "None specific to the TaskGroup API are documented for 3.12; 3.12 focused on asyncio performance and added eager‑task features that interact with tasks generally (TaskGroup debuted in 3.11).", "example": "asyncio.create_task(coro, eager_start=True)  # new in 3.12; affects task scheduling, not TaskGroup API per se", "why_it_matters": "Clarifies that most TaskGroup semantics from 3.11 remained, while task scheduling/cancellation evolved across 3.12–3.13.", "sources": [{"title": "What's New In Python 3.12 (asyncio performance)", "url": "https://docs.python.org/3/whatsnew/3.12.html"}, {"title": "Coroutines and Tasks (TaskGroup, 'Changed in 3.13' notes)", "url": "https://docs.python.org/3/library/asyncio-task.html"}, {"title": "What's New In Python 3.11 (TaskGroup added)", "url": "https://docs.python.org/3/whatsnew/3.11.html"}, {"title": "Changelog (asyncio eager tasks fix)", "url": "https://docs.python.org/3/whatsnew/changelog.html"}]}, "timestamp": "2025-08-17T16:03:48.837639Z"}
{"id": "typing_typeis_313", "title": "TypeIs in typing (PEP 742, Python 3.13)", "kind": "pep+library", "module": "typing", "pep": "742", "version": "3.13", "urls": ["https://peps.python.org/pep-0742/", "https://docs.python.org/3/library/typing.html"], "content": "PEP 742 adds typing.TypeIs[T], a user-defined type-narrowing return type that narrows on both True and False branches. It complements (rather than replaces) TypeGuard and is specified for Python 3.13.", "answer_card": {"question_pattern": "What is the new TypeIs feature introduced in Python 3.13 typing module?", "one_sentence": "TypeIs[T] lets a predicate function narrow a variable’s type in both the if and else branches (PEP 742, Python 3.13).", "example": "from typing import TypeIs\\n\ndef is_str(x: object) -> TypeIs[str]:\\n    return isinstance(x, str)", "why_it_matters": "Enables precise, bidirectional narrowing—often more intuitive than TypeGuard.", "sources": [{"title": "PEP 742 (Status: Final, Python-Version: 3.13)", "url": "https://peps.python.org/pep-0742/"}, {"title": "typing docs (TypeIs)", "url": "https://docs.python.org/3/library/typing.html"}]}, "timestamp": "2025-08-17T16:03:48.837641Z"}
{"id": "node_lts_2024", "title": "Latest Node.js LTS as of 2024", "kind": "external-runtime", "version": "2024", "urls": ["https://nodejs.org/en/about/previous-releases", "https://github.com/nodejs/Release", "https://endoflife.date/nodejs"], "content": "As of late 2024, the latest Node.js LTS line is v22 (codename 'Jod'), which entered Active LTS on 2024-10-29. Node 20 moved to Maintenance LTS. Use Node 22.x for production in 2024 unless ecosystem constraints require otherwise.", "answer_card": {"question_pattern": "What’s the latest LTS version of Node.js as of 2024?", "one_sentence": "Node.js 22.x ('Jod') became the Active LTS release on Oct 29, 2024.", "example": "node --version  # v22.x.y", "why_it_matters": "Active LTS ensures timely security and stability updates.", "sources": [{"title": "Node.js Releases", "url": "https://nodejs.org/en/about/previous-releases"}, {"title": "Node.js Release WG", "url": "https://github.com/nodejs/Release"}, {"title": "endoflife.date: Node.js", "url": "https://endoflife.date/nodejs"}]}, "timestamp": "2025-09-02T13:06:04.525331Z"}
{"id": "pep758_except_star_314", "title": "PEP 758: allow unparenthesized except and except* (Python 3.14)", "kind": "pep", "pep": "758", "version": "3.14", "urls": ["https://peps.python.org/pep-0758/", "https://docs.python.org/3.14/whatsnew/3.14.html"], "content": "Python 3.14 adopts PEP 758, allowing `except` and `except*` clauses to list multiple exception types without parentheses when not using `as`. Parentheses remain required with `as`.", "answer_card": {"question_pattern": "What’s the official syntax for the new except* clause introduced in Python 3.14?", "one_sentence": "In Python 3.14, you may write `except* E1 | E2:` (no parentheses) if you don't use `as`.", "example": "try:\n    ...\nexcept* GeneratorExit | SystemExit | KeyboardInterrupt:\n    ...\n# still need parens when using 'as'", "why_it_matters": "Cleans up exception-group handling syntax.", "sources": [{"title": "PEP 758", "url": "https://peps.python.org/pep-0758/"}, {"title": "What's New in Python 3.14", "url": "https://docs.python.org/3.14/whatsnew/3.14.html"}]}, "timestamp": "2025-09-02T13:06:04.525331Z"}
{"id": "asyncio_changes_312", "title": "asyncio: notable changes in Python 3.12", "kind": "module-update", "module": "asyncio", "version": "3.12", "urls": ["https://docs.python.org/3/whatsnew/3.12.html", "https://docs.python.org/3/library/asyncio-eventloop.html", "https://docs.python.org/3/library/asyncio-stream.html"], "content": "Python 3.12 brings asyncio performance work and quality-of-life changes: faster socket writes, support for sendmsg()/recvmsg() APIs, StreamWriter close/cleanup improvements, and general speed-ups (some benchmarks show large gains).", "answer_card": {"question_pattern": "Can you explain the changes to asyncio in Python 3.12?", "one_sentence": "3.12 speeds up asyncio and adds lower-level socket features like sendmsg/recvmsg, plus stream cleanup fixes.", "example": "# see loop.sock_* and stream APIs in docs", "why_it_matters": "Throughput and latency improvements benefit async apps.", "sources": [{"title": "What's New in Python 3.12 (asyncio)", "url": "https://docs.python.org/3/whatsnew/3.12.html"}]}, "timestamp": "2025-09-02T13:06:04.525331Z"}
{"id": "pep698_override_312", "title": "PEP 698: typing.override decorator (Python 3.12)", "kind": "pep", "pep": "698", "version": "3.12", "urls": ["https://peps.python.org/pep-0698/", "https://docs.python.org/3/whatsnew/3.12.html"], "content": "`typing.override` marks a method that intends to override a base-class method. Type checkers can flag mismatches; runtime is a no-op.", "answer_card": {"question_pattern": "What’s new in @override decorator introduced in Python 3.12?", "one_sentence": "`@override` (typing.override) lets type checkers verify a method actually overrides a base method.", "example": "from typing import override\nclass A: def f(self)->int: ...\nclass B(A):\n    @override\n    def f(self)->int: return 1", "why_it_matters": "Catches accidental non-overrides early.", "sources": [{"title": "PEP 698", "url": "https://peps.python.org/pep-0698/"}, {"title": "What's New in Python 3.12", "url": "https://docs.python.org/3/whatsnew/3.12.html"}]}, "timestamp": "2025-09-02T13:06:04.525331Z"}
{"id": "yield_from_async_generators_312", "title": "Is `yield from` valid in async generators? (Python 3.12)", "kind": "language-faq", "version": "3.12", "urls": ["https://docs.python.org/3/reference/compound_stmts.html#the-async-def-statement"], "content": "`yield from` is not allowed inside `async def` (including async generators). Use `await` and `async for` instead.", "answer_card": {"question_pattern": "Is yield from still valid syntax in async generators in Python 3.12?", "one_sentence": "No—`yield from` is illegal in `async def`; use `await`/`async for`.", "example": "async def bad():\n    yield from gen()  # SyntaxError\nasync def ok():\n    async for x in agen():\n        yield x", "why_it_matters": "Prevents mixing synchronous generator delegation with asynchronous flow control.", "sources": [{"title": "Language reference: async def", "url": "https://docs.python.org/3/reference/compound_stmts.html#the-async-def-statement"}]}, "timestamp": "2025-09-02T13:06:04.525331Z"}
{"id": "pycon2024_deprecations_roundup", "title": "Deprecations & removals highlighted around PyCon US 2024 (3.13 cycle)", "kind": "deprecations", "version": "3.13", "urls": ["https://docs.python.org/3/whatsnew/3.13.html", "https://peps.python.org/pep-0594/", "https://docs.python.org/3/deprecations/index.html"], "content": "During the 3.13 cycle (around PyCon US 2024), PEP 594 'dead batteries' removals landed (e.g., aifc, audioop, cgi, cgitb, chunk, crypt, imghdr, mailcap, msilib, nis, nntplib, ossaudiodev, pipes, sndhdr, spwd, sunau, telnetlib, uu, xdrlib). Other deprecations include CGI mode in http.server, etc.", "answer_card": {"question_pattern": "What deprecations were announced at PyCon 2024?", "one_sentence": "3.13 finalized PEP 594 removals and deprecated legacy CGI features, among others.", "example": "Removed: aifc, audioop, cgi, cgitb, chunk, crypt, imghdr, mailcap, msilib, nis, nntplib, ossaudiodev, pipes, sndhdr, spwd, sunau, telnetlib, uu, xdrlib.", "why_it_matters": "Helps migrations to Python 3.13+.", "sources": [{"title": "What's New in Python 3.13", "url": "https://docs.python.org/3/whatsnew/3.13.html"}, {"title": "PEP 594", "url": "https://peps.python.org/pep-0594/"}, {"title": "3.13 Deprecations Index", "url": "https://docs.python.org/3/deprecations/index.html"}]}, "timestamp": "2025-09-02T13:06:04.525331Z"}
{"id": "static_attributes_313", "title": "__static_attributes__: compiler-discovered instance attrs (Python 3.13)", "kind": "language-runtime", "version": "3.13", "urls": ["https://docs.python.org/3/whatsnew/changelog.html", "https://github.com/python/cpython/blob/main/Doc/whatsnew/3.13.rst"], "content": "Classes gain type.__static_attributes__, a tuple of attribute names assigned via self.X in the class (e.g., in __init__). This aids tools; it doesn't change __init__/__init_subclass__ behavior.", "answer_card": {"question_pattern": "What are the new static __init__ or __init_subclass__ changes in Python 3.13?", "one_sentence": "3.13 adds type.__static_attributes__—a compiler-populated tuple of likely instance attribute names set via self.X.", "example": "class User: \n    def __init__(self):\n        self.id=0; self.name='anon'\nassert set(User.__static_attributes__)=={'id','name'}", "why_it_matters": "Improves static tooling (linters, IDEs).", "sources": [{"title": "Changelog 3.13", "url": "https://docs.python.org/3/whatsnew/changelog.html"}, {"title": "What's New 3.13 (source)", "url": "https://github.com/python/cpython/blob/main/Doc/whatsnew/3.13.rst"}]}, "timestamp": "2025-09-02T13:06:04.525331Z"}
{"id": "project_db_config_python_qa", "title": "Project database choice & credentials (Python QA Assistant)", "kind": "project-policy", "version": "KB-Local", "urls": [], "content": "Default vector store: ChromaDB (persisted). Settings — persistent_directory: ./data/chroma, collection: python_qa_kb. Embeddings: bge-small-en-v1.5 or text-embedding-3-small.\nOptional dev PostgreSQL: HOST=localhost, PORT=5432, DB=python_qa, USER=pythonqa, PASSWORD=pythonqa_dev. Conn: postgresql://pythonqa:pythonqa_dev@localhost:5432/python_qa. Pool 1..10; SSL off in local dev. Put these in .env.", "answer_card": {"question_pattern": "Which database will we use - exact credentials and settings", "one_sentence": "Use ChromaDB (./data/chroma, collection python_qa_kb); dev Postgres: postgresql://pythonqa:pythonqa_dev@localhost:5432/python_qa.", "example": "# .env\nDATABASE_URL=postgresql://pythonqa:pythonqa_dev@localhost:5432/python_qa\nCHROMA_PERSIST_DIR=./data/chroma\nCHROMA_COLLECTION=python_qa_kb\nEMBEDDING_MODEL=text-embedding-3-small", "why_it_matters": "RAG needs a persistent vector store and explicit dev creds to avoid flakiness.", "sources": []}, "timestamp": "2025-09-02T13:06:04.525331Z"}
{"id": "project_db_config_python_qa_faq", "title": "FAQ: Database choice & exact credentials (Python QA RAG)", "kind": "project-policy+faq", "version": "KB-Local", "urls": [], "content": "Use ChromaDB at ./data/chroma (collection python_qa_kb); embedding model text-embedding-3-small (or bge-small-en-v1.5). Optional dev PostgreSQL for metadata: postgresql://pythonqa:pythonqa_dev@localhost:5432/python_qa.", "faq": {"questions": ["Which database will we use - exact credentials and settings", "Which DB are we using?", "What vector store are we using?", "What are the exact database credentials for development?"], "answer": "ChromaDB persisted at ./data/chroma (collection python_qa_kb) with text-embedding-3-small. Dev Postgres: postgresql://pythonqa:pythonqa_dev@localhost:5432/python_qa."}, "timestamp": "2025-09-02T13:06:04.525331Z", "answer_card": {"question_pattern": "FAQ: Database choice & exact credentials (Python QA RAG)", "one_sentence": "Use ChromaDB at ./data/chroma (collection python_qa_kb); embedding model text-embedding-3-small (or bge-small-en-v1.5).", "example": "", "why_it_matters": "", "sources": []}}
{"id": "py313_static_attributes_faq", "title": "FAQ: Static discovery of instance attributes in 3.13", "kind": "language-runtime+faq", "version": "3.13", "urls": ["https://docs.python.org/3/whatsnew/changelog.html", "https://github.com/python/cpython/blob/main/Doc/whatsnew/3.13.rst"], "content": "3.13 adds type.__static_attributes__, not changes to __init__/__init_subclass__.", "faq": {"questions": ["What are the new static __init__ or __init_subclass__ changes in Python 3.13?", "Did __init__ or __init_subclass__ change in 3.13?", "What is __static_attributes__ in Python 3.13?"], "answer": "No behavior changes to __init__/__init_subclass__. New: type.__static_attributes__, a compiler-derived tuple of names assigned via self.x."}, "timestamp": "2025-09-02T13:06:04.525331Z", "answer_card": {"question_pattern": "FAQ: Static discovery of instance attributes in 3.13", "one_sentence": "3.13 adds type.__static_attributes__, not changes to __init__/__init_subclass__.", "example": "", "why_it_matters": "", "sources": [{"title": "https://docs.python.org/3/whatsnew/changelog.html", "url": "https://docs.python.org/3/whatsnew/changelog.html"}, {"title": "https://github.com/python/cpython/blob/main/Doc/whatsnew/3.13.rst", "url": "https://github.com/python/cpython/blob/main/Doc/whatsnew/3.13.rst"}]}}
{"id": "pep698_override_312_faq", "title": "FAQ: @override (typing.override) in Python 3.12", "kind": "pep+faq", "pep": "698", "version": "3.12", "urls": ["https://peps.python.org/pep-0698/", "https://docs.python.org/3/whatsnew/3.12.html"], "content": "typing.override lets you mark intentional overrides; type checkers verify; runtime no-op.", "faq": {"questions": ["What’s new in @override decorator introduced in Python 3.12?", "What is typing.override in Python 3.12?", "How does @override work in Python?"], "answer": "Decorate overriding methods with @override to help type checkers catch name/signature mismatches."}, "timestamp": "2025-09-02T13:06:04.525331Z", "answer_card": {"question_pattern": "FAQ: @override (typing.override) in Python 3.12", "one_sentence": "typing.override lets you mark intentional overrides; type checkers verify; runtime no-op.", "example": "", "why_it_matters": "", "sources": [{"title": "https://peps.python.org/pep-0698/", "url": "https://peps.python.org/pep-0698/"}, {"title": "https://docs.python.org/3/whatsnew/3.12.html", "url": "https://docs.python.org/3/whatsnew/3.12.html"}]}}
{"id": "fstring_debugging_313_status", "title": "Status: f-string debugging ({expr=}) in Python 3.13", "kind": "language+faq", "version": "3.13", "urls": ["https://docs.python.org/3.8/whatsnew/3.8.html#f-strings-support-equals-for-self-documenting-expressions-and-debugging", "https://peps.python.org/pep-0701/", "https://docs.python.org/3.13/whatsnew/3.13.html"], "content": "The {expr=} debugging form exists since Python 3.8. PEP 701 (3.12) formalized parsing; 3.13 adds no new changes to debug f-strings.", "faq": {"questions": ["What are the new changes to f-string debugging in Python 3.13?", "Did Python 3.13 change f-string debugging?", "Is {expr=} different in 3.13?"], "answer": "No new changes in 3.13; {expr=} works the same as since 3.8."}, "timestamp": "2025-09-02T13:06:04.525331Z", "answer_card": {"question_pattern": "Status: f-string debugging ({expr=}) in Python 3.13", "one_sentence": "The {expr=} debugging form exists since Python 3.8.", "example": "", "why_it_matters": "", "sources": [{"title": "https://docs.python.org/3.8/whatsnew/3.8.html#f-strings-support-equals-for-self-documenting-expressions-and-debugging", "url": "https://docs.python.org/3.8/whatsnew/3.8.html#f-strings-support-equals-for-self-documenting-expressions-and-debugging"}, {"title": "https://peps.python.org/pep-0701/", "url": "https://peps.python.org/pep-0701/"}, {"title": "https://docs.python.org/3.13/whatsnew/3.13.html", "url": "https://docs.python.org/3.13/whatsnew/3.13.html"}]}}
