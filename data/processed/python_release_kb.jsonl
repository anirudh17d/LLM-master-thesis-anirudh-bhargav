{"id": "py313_overview", "title": "What's Actually New in Python 3.13", "kind": "whatsnew", "version": "3.13", "released": "2024-10-07", "urls": ["https://docs.python.org/3/whatsnew/3.13.html", "https://www.python.org/downloads/release/python-3130/", "https://peps.python.org/pep-0703/", "https://peps.python.org/pep-0744/"], "content": "Python 3.13 introduces a revamped interactive interpreter with colorized tracebacks, experimental free-threaded mode per PEP 703 (GIL disabled build), and a basic JIT compiler per PEP 744 (off by default initially). It also defines semantics for mutating locals(), adds default values for type parameters, and removes several long-deprecated stdlib modules following PEP 594. The release notes emphasize user-facing improvements and deprecations, and provide porting guidance.", "answer_card": {"question_pattern": "What's actually new in Python 3.13?", "one_sentence": "Released on Oct 7, 2024, Python 3.13 ships a new interactive interpreter, experimental free‑threaded mode (PEP 703), and a basic JIT compiler (PEP 744), plus many stdlib cleanups and deprecations.", "example": "Enable colors via default settings in tracebacks; free‑threaded CPython can be built and run experimentally.", "why_it_matters": "Interactivity, performance groundwork (JIT), and concurrency experiments set direction for future releases.", "sources": [{"title": "What's New In Python 3.13", "url": "https://docs.python.org/3/whatsnew/3.13.html"}, {"title": "Python 3.13.0 Release", "url": "https://www.python.org/downloads/release/python-3130/"}, {"title": "PEP 703", "url": "https://peps.python.org/pep-0703/"}, {"title": "PEP 744", "url": "https://peps.python.org/pep-0744/"}]}, "timestamp": "2025-08-17T16:03:48.837617Z"}
{"id": "venv_gitignore_313", "title": "venv default .gitignore and new flag in 3.13", "kind": "library", "module": "venv", "version": "3.13", "urls": ["https://docs.python.org/3/library/venv.html"], "content": "In Python 3.13, venv creates a .gitignore file by default to prevent committing the environment. A new CLI option --without-scm-ignore-files disables adding SCM ignore files. The EnvBuilder API also gains an scm_ignore_files parameter and create_git_ignore_file().", "answer_card": {"question_pattern": "What is the new flag in Python 3.13 venv and what does it do?", "one_sentence": "Python 3.13's venv now writes a .gitignore by default; use --without-scm-ignore-files to opt out.", "example": "python -m venv --without-scm-ignore-files .venv  # do not create .gitignore in the venv dir", "why_it_matters": "Prevents accidental commits of virtual environments while allowing projects to opt out.", "sources": [{"title": "venv — Creation of virtual environments", "url": "https://docs.python.org/3/library/venv.html"}]}, "timestamp": "2025-08-17T16:03:48.837627Z"}
{"id": "pep701_fstrings_312", "title": "PEP 701: f-strings formalized (Python 3.12)", "kind": "pep+whatsnew", "pep": "701", "version": "3.12", "urls": ["https://docs.python.org/3/whatsnew/3.12.html", "https://peps.python.org/pep-0701/"], "content": "Python 3.12 integrates f-strings into the grammar (PEP 701), lifting many previous restrictions: arbitrary expressions, reuse of the same quotes as the outer f-string, multi-line expressions, comments, backslashes, and Unicode escapes inside expressions. Tokenization also changes (FSTRING_* tokens), speeding tokenize() by up to ~64% in benchmarks.", "answer_card": {"question_pattern": "What changes did PEP 701 bring to f-strings in Python 3.12?", "one_sentence": "PEP 701 (3.12) lifts prior f-string limits—allowing arbitrary, multi-line expressions with quote reuse, comments, and backslashes—and updates tokenization.", "example": "f\"This is the playlist: {', '.join([\n  'Take me back to Eden',  # comment\n  'Alkaline',\n])}\"", "why_it_matters": "Makes f-strings more expressive and fixes long‑standing parsing quirks; tools get clearer tokens.", "sources": [{"title": "What's New In Python 3.12 (PEP 701 section)", "url": "https://docs.python.org/3/whatsnew/3.12.html"}, {"title": "PEP 701", "url": "https://peps.python.org/pep-0701/"}]}, "timestamp": "2025-08-17T16:03:48.837629Z"}
{"id": "pep722_status", "title": "PEP 722: single-file script dependencies (status)", "kind": "pep", "pep": "722", "version": "N/A", "urls": ["https://peps.python.org/pep-0722/", "https://peps.python.org/pep-0723/"], "content": "PEP 722 proposed a comment-based dependency block for single-file scripts. Status: Rejected and superseded by PEP 723 ('Inline script metadata'). Therefore, no Python version 'added' PEP 722.", "answer_card": {"question_pattern": "What is PEP 722 and in which Python version was it added?", "one_sentence": "PEP 722 defined a script dependency block format but was rejected; no Python release added it (superseded by PEP 723).", "example": "# Script Dependencies:\\n#   requests\\n#   rich  # example  (format proposed, not accepted)", "why_it_matters": "Avoids misinformation when comparing 722 vs. the accepted 723 approach to inline script metadata.", "sources": [{"title": "PEP 722 (Status: Rejected)", "url": "https://peps.python.org/pep-0722/"}, {"title": "PEP 723 (Inline script metadata)", "url": "https://peps.python.org/pep-0723/"}]}, "timestamp": "2025-08-17T16:03:48.837631Z"}
{"id": "pep688_buffer_protocol_312", "title": "PEP 688: Python-level buffer protocol (3.12)", "kind": "pep", "pep": "688", "version": "3.12", "urls": ["https://peps.python.org/pep-0688/", "https://docs.python.org/3/whatsnew/3.12.html"], "content": "PEP 688 adds Python-level access to the buffer protocol, introducing __buffer__/__release_buffer__ hooks and typing support via collections.abc.Buffer, enabling type checkers and Python code to reason about buffer-capable objects.", "answer_card": {"question_pattern": "What does PEP 688 add to the Python standard library?", "one_sentence": "PEP 688 (3.12) exposes the buffer protocol to Python with __buffer__/__release_buffer__ and a Buffer ABC for typing.", "example": "class MyBuffer:  # sketch\\n    def __buffer__(self, flags: int, /) -> memoryview: ...", "why_it_matters": "Lets pure‑Python code and type checkers interoperate with buffer‑providing objects more consistently.", "sources": [{"title": "PEP 688 (Python-Version: 3.12)", "url": "https://peps.python.org/pep-0688/"}, {"title": "What's New In Python 3.12", "url": "https://docs.python.org/3/whatsnew/3.12.html"}]}, "timestamp": "2025-08-17T16:03:48.837634Z"}
{"id": "tomllib_added_in_311", "title": "TOML parsing module added in 3.11 (tomllib)", "kind": "library", "module": "tomllib", "version": "3.11", "urls": ["https://docs.python.org/3/library/tomllib.html", "https://docs.python.org/3/whatsnew/3.11.html"], "content": "The read-only TOML parser 'tomllib' was added to the standard library in Python 3.11. It supports TOML 1.0 and provides load()/loads() for reading TOML; it does not support writing.", "answer_card": {"question_pattern": "Which new module for TOML parsing was added in Python 3.13?", "one_sentence": "None—TOML parsing arrived earlier: the stdlib module tomllib was added in Python 3.11 (not 3.13).", "example": "import tomllib; data = tomllib.loads('x = 1')", "why_it_matters": "Prevents version confusion when building features that depend on TOML parsing.", "sources": [{"title": "tomllib — Parse TOML files (Added in 3.11)", "url": "https://docs.python.org/3/library/tomllib.html"}, {"title": "What's New In Python 3.11", "url": "https://docs.python.org/3/whatsnew/3.11.html"}]}, "timestamp": "2025-08-17T16:03:48.837636Z"}
{"id": "asyncio_taskgroup_312", "title": "Asyncio TaskGroup notes for Python 3.12", "kind": "library", "module": "asyncio", "version": "3.12", "urls": ["https://docs.python.org/3/whatsnew/3.12.html", "https://docs.python.org/3/library/asyncio-task.html", "https://docs.python.org/3/whatsnew/3.11.html", "https://docs.python.org/3/whatsnew/changelog.html"], "content": "TaskGroup was introduced in 3.11. In 3.12, asyncio saw substantial performance work and new eager task support (e.g., eager_start parameter on create_task and create_eager_task_factory()). There is no specific TaskGroup API change called out for 3.12 in the docs; later in 3.13, TaskGroup.create_task() was clarified to close the coroutine if the group is inactive, and changelog entries reference fixes around eager tasks and cancellation semantics.", "answer_card": {"question_pattern": "What changes were made to asyncio TaskGroups in Python 3.12?", "one_sentence": "None specific to the TaskGroup API are documented for 3.12; 3.12 focused on asyncio performance and added eager‑task features that interact with tasks generally (TaskGroup debuted in 3.11).", "example": "asyncio.create_task(coro, eager_start=True)  # new in 3.12; affects task scheduling, not TaskGroup API per se", "why_it_matters": "Clarifies that most TaskGroup semantics from 3.11 remained, while task scheduling/cancellation evolved across 3.12–3.13.", "sources": [{"title": "What's New In Python 3.12 (asyncio performance)", "url": "https://docs.python.org/3/whatsnew/3.12.html"}, {"title": "Coroutines and Tasks (TaskGroup, 'Changed in 3.13' notes)", "url": "https://docs.python.org/3/library/asyncio-task.html"}, {"title": "What's New In Python 3.11 (TaskGroup added)", "url": "https://docs.python.org/3/whatsnew/3.11.html"}, {"title": "Changelog (asyncio eager tasks fix)", "url": "https://docs.python.org/3/whatsnew/changelog.html"}]}, "timestamp": "2025-08-17T16:03:48.837639Z"}
{"id": "typing_typeis_313", "title": "TypeIs in typing (PEP 742, Python 3.13)", "kind": "pep+library", "module": "typing", "pep": "742", "version": "3.13", "urls": ["https://peps.python.org/pep-0742/", "https://docs.python.org/3/library/typing.html"], "content": "PEP 742 adds typing.TypeIs[T], a user-defined type-narrowing return type that narrows on both True and False branches. It complements (rather than replaces) TypeGuard and is specified for Python 3.13.", "answer_card": {"question_pattern": "What is the new TypeIs feature introduced in Python 3.13 typing module?", "one_sentence": "TypeIs[T] lets a predicate function narrow a variable’s type in both the if and else branches (PEP 742, Python 3.13).", "example": "from typing import TypeIs\\n\ndef is_str(x: object) -> TypeIs[str]:\\n    return isinstance(x, str)", "why_it_matters": "Enables precise, bidirectional narrowing—often more intuitive than TypeGuard.", "sources": [{"title": "PEP 742 (Status: Final, Python-Version: 3.13)", "url": "https://peps.python.org/pep-0742/"}, {"title": "typing docs (TypeIs)", "url": "https://docs.python.org/3/library/typing.html"}]}, "timestamp": "2025-08-17T16:03:48.837641Z"}
